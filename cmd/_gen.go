// generated by argen; DO NOT EDIT
package db

import (
	"fmt"

	"github.com/monochromegane/argen"
)

type ContentThumbnailRelation struct {
	src *ContentThumbnail
	*ar.Relation
}

func (m *ContentThumbnail) newRelation() *ContentThumbnailRelation {
	r := &ContentThumbnailRelation{
		m,
		ar.NewRelation(db, logger).Table("content_thumbnails"),
	}
	r.Select(
		"id",
		"data",
		"created_at",
		"updated_at",
	)

	return r
}

func (m ContentThumbnail) Select(columns ...string) *ContentThumbnailRelation {
	return m.newRelation().Select(columns...)
}

func (r *ContentThumbnailRelation) Select(columns ...string) *ContentThumbnailRelation {
	cs := []string{}
	for _, c := range columns {
		if r.src.isColumnName(c) {
			cs = append(cs, fmt.Sprintf("content_thumbnails.%s", c))
		} else {
			cs = append(cs, c)
		}
	}
	r.Relation.Columns(cs...)
	return r
}

func (m ContentThumbnail) Find(id int) (*ContentThumbnail, error) {
	return m.newRelation().Find(id)
}

func (r *ContentThumbnailRelation) Find(id int) (*ContentThumbnail, error) {
	return r.FindBy("id", id)
}

func (m ContentThumbnail) FindBy(cond string, args ...interface{}) (*ContentThumbnail, error) {
	return m.newRelation().FindBy(cond, args...)
}

func (r *ContentThumbnailRelation) FindBy(cond string, args ...interface{}) (*ContentThumbnail, error) {
	return r.Where(cond, args...).Limit(1).QueryRow()
}

func (m ContentThumbnail) First() (*ContentThumbnail, error) {
	return m.newRelation().First()
}

func (r *ContentThumbnailRelation) First() (*ContentThumbnail, error) {
	return r.Order("id", "ASC").Limit(1).QueryRow()
}

func (m ContentThumbnail) Last() (*ContentThumbnail, error) {
	return m.newRelation().Last()
}

func (r *ContentThumbnailRelation) Last() (*ContentThumbnail, error) {
	return r.Order("id", "DESC").Limit(1).QueryRow()
}

func (m ContentThumbnail) Where(cond string, args ...interface{}) *ContentThumbnailRelation {
	return m.newRelation().Where(cond, args...)
}

func (r *ContentThumbnailRelation) Where(cond string, args ...interface{}) *ContentThumbnailRelation {
	r.Relation.Where(cond, args...)
	return r
}

func (r *ContentThumbnailRelation) And(cond string, args ...interface{}) *ContentThumbnailRelation {
	r.Relation.And(cond, args...)
	return r
}

func (m ContentThumbnail) Order(column, order string) *ContentThumbnailRelation {
	return m.newRelation().Order(column, order)
}

func (r *ContentThumbnailRelation) Order(column, order string) *ContentThumbnailRelation {
	r.Relation.OrderBy(column, order)
	return r
}

func (m ContentThumbnail) Limit(limit int) *ContentThumbnailRelation {
	return m.newRelation().Limit(limit)
}

func (r *ContentThumbnailRelation) Limit(limit int) *ContentThumbnailRelation {
	r.Relation.Limit(limit)
	return r
}

func (m ContentThumbnail) Offset(offset int) *ContentThumbnailRelation {
	return m.newRelation().Offset(offset)
}

func (r *ContentThumbnailRelation) Offset(offset int) *ContentThumbnailRelation {
	r.Relation.Offset(offset)
	return r
}

func (m ContentThumbnail) Group(group string, groups ...string) *ContentThumbnailRelation {
	return m.newRelation().Group(group, groups...)
}

func (r *ContentThumbnailRelation) Group(group string, groups ...string) *ContentThumbnailRelation {
	r.Relation.GroupBy(group, groups...)
	return r
}

func (r *ContentThumbnailRelation) Having(cond string, args ...interface{}) *ContentThumbnailRelation {
	r.Relation.Having(cond, args...)
	return r
}

func (m ContentThumbnail) IsValid() (bool, *ar.Errors) {
	result := true
	errors := &ar.Errors{}
	var on ar.On
	if m.IsNewRecord() {
		on = ar.OnCreate()
	} else {
		on = ar.OnUpdate()
	}
	rules := map[string]*ar.Validation{}
	for name, rule := range rules {
		if ok, errs := ar.NewValidator(rule).On(on).IsValid(m.fieldValueByName(name)); !ok {
			result = false
			errors.SetErrors(name, errs)
		}
	}
	customs := []*ar.Validation{}
	for _, rule := range customs {
		custom := ar.NewValidator(rule).On(on).Custom()
		custom(errors)
	}
	if len(errors.Messages) > 0 {
		result = false
	}
	return result, errors
}

type ContentThumbnailParams ContentThumbnail

func (m ContentThumbnail) Build(p ContentThumbnailParams) *ContentThumbnail {
	return &ContentThumbnail{
		ID:        p.ID,
		Data:      p.Data,
		CreatedAt: p.CreatedAt,
		UpdatedAt: p.UpdatedAt,
	}
}

func (m ContentThumbnail) Create(p ContentThumbnailParams) (*ContentThumbnail, *ar.Errors) {
	n := m.Build(p)
	_, errs := n.Save()
	return n, errs
}

func (m *ContentThumbnail) IsNewRecord() bool {
	return ar.IsZero(m.ID)
}

func (m *ContentThumbnail) IsPersistent() bool {
	return !m.IsNewRecord()
}

func (m *ContentThumbnail) Save(validate ...bool) (bool, *ar.Errors) {
	if len(validate) == 0 || len(validate) > 0 && validate[0] {
		if ok, errs := m.IsValid(); !ok {
			return false, errs
		}
	}
	errs := &ar.Errors{}
	if m.IsNewRecord() {
		ins := ar.NewInsert(db, logger).Table("content_thumbnails").Params(map[string]interface{}{
			"data":       m.Data,
			"created_at": m.CreatedAt,
			"updated_at": m.UpdatedAt,
		})

		if result, err := ins.Exec(); err != nil {
			errs.AddError("base", err)
			return false, errs
		} else {
			if lastId, err := result.LastInsertId(); err == nil {
				m.ID = int(lastId)
			}
		}
		return true, nil
	} else {
		upd := ar.NewUpdate(db, logger).Table("content_thumbnails").Params(map[string]interface{}{
			"id":         m.ID,
			"data":       m.Data,
			"created_at": m.CreatedAt,
			"updated_at": m.UpdatedAt,
		}).Where("id", m.ID)

		if _, err := upd.Exec(); err != nil {
			errs.AddError("base", err)
			return false, errs
		}
		return true, nil
	}
}

func (m *ContentThumbnail) Update(p ContentThumbnailParams) (bool, *ar.Errors) {

	if !ar.IsZero(p.ID) {
		m.ID = p.ID
	}
	if !ar.IsZero(p.Data) {
		m.Data = p.Data
	}
	if !ar.IsZero(p.CreatedAt) {
		m.CreatedAt = p.CreatedAt
	}
	if !ar.IsZero(p.UpdatedAt) {
		m.UpdatedAt = p.UpdatedAt
	}
	return m.Save()
}

func (m *ContentThumbnail) UpdateColumns(p ContentThumbnailParams) (bool, *ar.Errors) {

	if !ar.IsZero(p.ID) {
		m.ID = p.ID
	}
	if !ar.IsZero(p.Data) {
		m.Data = p.Data
	}
	if !ar.IsZero(p.CreatedAt) {
		m.CreatedAt = p.CreatedAt
	}
	if !ar.IsZero(p.UpdatedAt) {
		m.UpdatedAt = p.UpdatedAt
	}
	return m.Save(false)
}

func (m *ContentThumbnail) Destroy() (bool, *ar.Errors) {
	return m.Delete()
}

func (m *ContentThumbnail) Delete() (bool, *ar.Errors) {
	errs := &ar.Errors{}
	if _, err := ar.NewDelete(db, logger).Table("content_thumbnails").Where("id", m.ID).Exec(); err != nil {
		errs.AddError("base", err)
		return false, errs
	}
	return true, nil
}

func (m ContentThumbnail) DeleteAll() (bool, *ar.Errors) {
	errs := &ar.Errors{}
	if _, err := ar.NewDelete(db, logger).Table("content_thumbnails").Exec(); err != nil {
		errs.AddError("base", err)
		return false, errs
	}
	return true, nil
}

func (r *ContentThumbnailRelation) Query() ([]*ContentThumbnail, error) {
	rows, err := r.Relation.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	results := []*ContentThumbnail{}
	for rows.Next() {
		row := &ContentThumbnail{}
		err := rows.Scan(row.fieldPtrsByName(r.Relation.GetColumns())...)
		if err != nil {
			return nil, err
		}
		results = append(results, row)
	}
	return results, nil
}

func (r *ContentThumbnailRelation) QueryRow() (*ContentThumbnail, error) {
	row := &ContentThumbnail{}
	err := r.Relation.QueryRow(row.fieldPtrsByName(r.Relation.GetColumns())...)
	if err != nil {
		return nil, err
	}
	return row, nil
}

func (m ContentThumbnail) Exists() bool {
	return m.newRelation().Exists()
}

func (m ContentThumbnail) Count(column ...string) int {
	return m.newRelation().Count(column...)
}

func (m ContentThumbnail) All() *ContentThumbnailRelation {
	return m.newRelation().All()
}

func (r *ContentThumbnailRelation) All() *ContentThumbnailRelation {
	return r
}

func (m *ContentThumbnail) fieldValueByName(name string) interface{} {
	switch name {
	case "id", "content_thumbnails.id":
		return m.ID
	case "data", "content_thumbnails.data":
		return m.Data
	case "created_at", "content_thumbnails.created_at":
		return m.CreatedAt
	case "updated_at", "content_thumbnails.updated_at":
		return m.UpdatedAt
	default:
		return ""
	}
}

func (m *ContentThumbnail) fieldPtrByName(name string) interface{} {
	switch name {
	case "id", "content_thumbnails.id":
		return &m.ID
	case "data", "content_thumbnails.data":
		return &m.Data
	case "created_at", "content_thumbnails.created_at":
		return &m.CreatedAt
	case "updated_at", "content_thumbnails.updated_at":
		return &m.UpdatedAt
	default:
		return nil
	}
}

func (m *ContentThumbnail) fieldPtrsByName(names []string) []interface{} {
	fields := []interface{}{}
	for _, n := range names {
		f := m.fieldPtrByName(n)
		fields = append(fields, f)
	}
	return fields
}

func (m *ContentThumbnail) isColumnName(name string) bool {
	for _, c := range m.columnNames() {
		if c == name {
			return true
		}
	}
	return false
}

func (m *ContentThumbnail) columnNames() []string {
	return []string{
		"id",
		"data",
		"created_at",
		"updated_at",
	}
}
