// generated by argen; DO NOT EDIT
package db

import (
	"fmt"

	"github.com/monochromegane/argen"
)

type ProjectContentRelation struct {
	src *ProjectContent
	*ar.Relation
}

func (m *ProjectContent) newRelation() *ProjectContentRelation {
	r := &ProjectContentRelation{
		m,
		ar.NewRelation(db, logger).Table("project_contents"),
	}
	r.Select(
		"id",
		"project_id",
		"content_id",
		"type",
		"created_at",
		"updated_at",
	)

	return r
}

func (m ProjectContent) Select(columns ...string) *ProjectContentRelation {
	return m.newRelation().Select(columns...)
}

func (r *ProjectContentRelation) Select(columns ...string) *ProjectContentRelation {
	cs := []string{}
	for _, c := range columns {
		if r.src.isColumnName(c) {
			cs = append(cs, fmt.Sprintf("project_contents.%s", c))
		} else {
			cs = append(cs, c)
		}
	}
	r.Relation.Columns(cs...)
	return r
}

func (m ProjectContent) Find(id int) (*ProjectContent, error) {
	return m.newRelation().Find(id)
}

func (r *ProjectContentRelation) Find(id int) (*ProjectContent, error) {
	return r.FindBy("id", id)
}

func (m ProjectContent) FindBy(cond string, args ...interface{}) (*ProjectContent, error) {
	return m.newRelation().FindBy(cond, args...)
}

func (r *ProjectContentRelation) FindBy(cond string, args ...interface{}) (*ProjectContent, error) {
	return r.Where(cond, args...).Limit(1).QueryRow()
}

func (m ProjectContent) First() (*ProjectContent, error) {
	return m.newRelation().First()
}

func (r *ProjectContentRelation) First() (*ProjectContent, error) {
	return r.Order("id", "ASC").Limit(1).QueryRow()
}

func (m ProjectContent) Last() (*ProjectContent, error) {
	return m.newRelation().Last()
}

func (r *ProjectContentRelation) Last() (*ProjectContent, error) {
	return r.Order("id", "DESC").Limit(1).QueryRow()
}

func (m ProjectContent) Where(cond string, args ...interface{}) *ProjectContentRelation {
	return m.newRelation().Where(cond, args...)
}

func (r *ProjectContentRelation) Where(cond string, args ...interface{}) *ProjectContentRelation {
	r.Relation.Where(cond, args...)
	return r
}

func (r *ProjectContentRelation) And(cond string, args ...interface{}) *ProjectContentRelation {
	r.Relation.And(cond, args...)
	return r
}

func (m ProjectContent) Order(column, order string) *ProjectContentRelation {
	return m.newRelation().Order(column, order)
}

func (r *ProjectContentRelation) Order(column, order string) *ProjectContentRelation {
	r.Relation.OrderBy(column, order)
	return r
}

func (m ProjectContent) Limit(limit int) *ProjectContentRelation {
	return m.newRelation().Limit(limit)
}

func (r *ProjectContentRelation) Limit(limit int) *ProjectContentRelation {
	r.Relation.Limit(limit)
	return r
}

func (m ProjectContent) Offset(offset int) *ProjectContentRelation {
	return m.newRelation().Offset(offset)
}

func (r *ProjectContentRelation) Offset(offset int) *ProjectContentRelation {
	r.Relation.Offset(offset)
	return r
}

func (m ProjectContent) Group(group string, groups ...string) *ProjectContentRelation {
	return m.newRelation().Group(group, groups...)
}

func (r *ProjectContentRelation) Group(group string, groups ...string) *ProjectContentRelation {
	r.Relation.GroupBy(group, groups...)
	return r
}

func (r *ProjectContentRelation) Having(cond string, args ...interface{}) *ProjectContentRelation {
	r.Relation.Having(cond, args...)
	return r
}

func (m ProjectContent) IsValid() (bool, *ar.Errors) {
	result := true
	errors := &ar.Errors{}
	var on ar.On
	if m.IsNewRecord() {
		on = ar.OnCreate()
	} else {
		on = ar.OnUpdate()
	}
	rules := map[string]*ar.Validation{}
	for name, rule := range rules {
		if ok, errs := ar.NewValidator(rule).On(on).IsValid(m.fieldValueByName(name)); !ok {
			result = false
			errors.SetErrors(name, errs)
		}
	}
	customs := []*ar.Validation{}
	for _, rule := range customs {
		custom := ar.NewValidator(rule).On(on).Custom()
		custom(errors)
	}
	if len(errors.Messages) > 0 {
		result = false
	}
	return result, errors
}

func (m *ProjectContent) Content() (*Content, error) {
	asc := m.belongsToContent()
	pk := "id"
	fk := "content_id"
	if asc != nil && asc.PrimaryKey != "" {
		pk = asc.PrimaryKey
	}
	if asc != nil && asc.ForeignKey != "" {
		fk = asc.ForeignKey
	}
	return Content{}.Where(pk, m.fieldValueByName(fk)).QueryRow()
}

func (m ProjectContent) JoinsContent() *ProjectContentRelation {
	return m.newRelation().JoinsContent()
}

func (r *ProjectContentRelation) JoinsContent() *ProjectContentRelation {
	asc := r.src.belongsToContent()
	pk := "id"
	fk := "content_id"
	if asc != nil && asc.PrimaryKey != "" {
		pk = asc.PrimaryKey
	}
	if asc != nil && asc.ForeignKey != "" {
		fk = asc.ForeignKey
	}
	r.Relation.InnerJoin("contents", fmt.Sprintf("contents.%s = project_contents.%s", pk, fk))
	return r
}

type ProjectContentParams ProjectContent

func (m ProjectContent) Build(p ProjectContentParams) *ProjectContent {
	return &ProjectContent{
		ID:        p.ID,
		ProjectID: p.ProjectID,
		ContentID: p.ContentID,
		Type:      p.Type,
		CreatedAt: p.CreatedAt,
		UpdatedAt: p.UpdatedAt,
	}
}

func (m ProjectContent) Create(p ProjectContentParams) (*ProjectContent, *ar.Errors) {
	n := m.Build(p)
	_, errs := n.Save()
	return n, errs
}

func (m *ProjectContent) IsNewRecord() bool {
	return ar.IsZero(m.ID)
}

func (m *ProjectContent) IsPersistent() bool {
	return !m.IsNewRecord()
}

func (m *ProjectContent) Save(validate ...bool) (bool, *ar.Errors) {
	if len(validate) == 0 || len(validate) > 0 && validate[0] {
		if ok, errs := m.IsValid(); !ok {
			return false, errs
		}
	}
	errs := &ar.Errors{}
	if m.IsNewRecord() {
		ins := ar.NewInsert(db, logger).Table("project_contents").Params(map[string]interface{}{
			"project_id": m.ProjectID,
			"content_id": m.ContentID,
			"type":       m.Type,
			"created_at": m.CreatedAt,
			"updated_at": m.UpdatedAt,
		})

		if result, err := ins.Exec(); err != nil {
			errs.AddError("base", err)
			return false, errs
		} else {
			if lastId, err := result.LastInsertId(); err == nil {
				m.ID = int(lastId)
			}
		}
		return true, nil
	} else {
		upd := ar.NewUpdate(db, logger).Table("project_contents").Params(map[string]interface{}{
			"id":         m.ID,
			"project_id": m.ProjectID,
			"content_id": m.ContentID,
			"type":       m.Type,
			"created_at": m.CreatedAt,
			"updated_at": m.UpdatedAt,
		}).Where("id", m.ID)

		if _, err := upd.Exec(); err != nil {
			errs.AddError("base", err)
			return false, errs
		}
		return true, nil
	}
}

func (m *ProjectContent) Update(p ProjectContentParams) (bool, *ar.Errors) {

	if !ar.IsZero(p.ID) {
		m.ID = p.ID
	}
	if !ar.IsZero(p.ProjectID) {
		m.ProjectID = p.ProjectID
	}
	if !ar.IsZero(p.ContentID) {
		m.ContentID = p.ContentID
	}
	if !ar.IsZero(p.Type) {
		m.Type = p.Type
	}
	if !ar.IsZero(p.CreatedAt) {
		m.CreatedAt = p.CreatedAt
	}
	if !ar.IsZero(p.UpdatedAt) {
		m.UpdatedAt = p.UpdatedAt
	}
	return m.Save()
}

func (m *ProjectContent) UpdateColumns(p ProjectContentParams) (bool, *ar.Errors) {

	if !ar.IsZero(p.ID) {
		m.ID = p.ID
	}
	if !ar.IsZero(p.ProjectID) {
		m.ProjectID = p.ProjectID
	}
	if !ar.IsZero(p.ContentID) {
		m.ContentID = p.ContentID
	}
	if !ar.IsZero(p.Type) {
		m.Type = p.Type
	}
	if !ar.IsZero(p.CreatedAt) {
		m.CreatedAt = p.CreatedAt
	}
	if !ar.IsZero(p.UpdatedAt) {
		m.UpdatedAt = p.UpdatedAt
	}
	return m.Save(false)
}

func (m *ProjectContent) Destroy() (bool, *ar.Errors) {
	return m.Delete()
}

func (m *ProjectContent) Delete() (bool, *ar.Errors) {
	errs := &ar.Errors{}
	if _, err := ar.NewDelete(db, logger).Table("project_contents").Where("id", m.ID).Exec(); err != nil {
		errs.AddError("base", err)
		return false, errs
	}
	return true, nil
}

func (m ProjectContent) DeleteAll() (bool, *ar.Errors) {
	errs := &ar.Errors{}
	if _, err := ar.NewDelete(db, logger).Table("project_contents").Exec(); err != nil {
		errs.AddError("base", err)
		return false, errs
	}
	return true, nil
}

func (r *ProjectContentRelation) Query() ([]*ProjectContent, error) {
	rows, err := r.Relation.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	results := []*ProjectContent{}
	for rows.Next() {
		row := &ProjectContent{}
		err := rows.Scan(row.fieldPtrsByName(r.Relation.GetColumns())...)
		if err != nil {
			return nil, err
		}
		results = append(results, row)
	}
	return results, nil
}

func (r *ProjectContentRelation) QueryRow() (*ProjectContent, error) {
	row := &ProjectContent{}
	err := r.Relation.QueryRow(row.fieldPtrsByName(r.Relation.GetColumns())...)
	if err != nil {
		return nil, err
	}
	return row, nil
}

func (m ProjectContent) Exists() bool {
	return m.newRelation().Exists()
}

func (m ProjectContent) Count(column ...string) int {
	return m.newRelation().Count(column...)
}

func (m ProjectContent) All() *ProjectContentRelation {
	return m.newRelation().All()
}

func (r *ProjectContentRelation) All() *ProjectContentRelation {
	return r
}

func (m *ProjectContent) fieldValueByName(name string) interface{} {
	switch name {
	case "id", "project_contents.id":
		return m.ID
	case "project_id", "project_contents.project_id":
		return m.ProjectID
	case "content_id", "project_contents.content_id":
		return m.ContentID
	case "type", "project_contents.type":
		return m.Type
	case "created_at", "project_contents.created_at":
		return m.CreatedAt
	case "updated_at", "project_contents.updated_at":
		return m.UpdatedAt
	default:
		return ""
	}
}

func (m *ProjectContent) fieldPtrByName(name string) interface{} {
	switch name {
	case "id", "project_contents.id":
		return &m.ID
	case "project_id", "project_contents.project_id":
		return &m.ProjectID
	case "content_id", "project_contents.content_id":
		return &m.ContentID
	case "type", "project_contents.type":
		return &m.Type
	case "created_at", "project_contents.created_at":
		return &m.CreatedAt
	case "updated_at", "project_contents.updated_at":
		return &m.UpdatedAt
	default:
		return nil
	}
}

func (m *ProjectContent) fieldPtrsByName(names []string) []interface{} {
	fields := []interface{}{}
	for _, n := range names {
		f := m.fieldPtrByName(n)
		fields = append(fields, f)
	}
	return fields
}

func (m *ProjectContent) isColumnName(name string) bool {
	for _, c := range m.columnNames() {
		if c == name {
			return true
		}
	}
	return false
}

func (m *ProjectContent) columnNames() []string {
	return []string{
		"id",
		"project_id",
		"content_id",
		"type",
		"created_at",
		"updated_at",
	}
}
